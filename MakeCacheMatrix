#The function "makeCacheMatrix" is created to strat the function of the script. It creates the values of the numeric and solve the inverse

makeChachematrix <- function (x = matrix)){
inv <- NULL
set <- function(y) {
 x <<- y 
 inv <<- NULL
 }
 
 get <- function (x,...){
 setmeaninv <- function (inv) n <<- Inverse
 getmeaninv <- function ()n
 list (set = set , get = get,
       setinverse = setinverse,
       getinverse = getinverse)
 }

## Now making the code structure for the "cacheSolve" function.. 
## The "cacheSolve" function uses to calculate the given "makeCacheMatrix" statement and inverse the numeric. 

cachesolve <- function (x,....){

##Return a matrix that is inverse of 'x'

 inv <- x$getInverse()
 if (!is.null(inv)){
 
## The statement will apply if the function of the inverse shown will turn out to be NULL 

message ("getting cached data")
 return (inv)
 }data <- x$get()
 n <- inv (data,...)
 x$setInverse(inv)
 n
 }
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
